//
//  SelectOptionViewController.swift
//  TopCariving
//
//  Created by Ï°∞ÏäπÍ∏∞ on 2023/08/18.
//

import Combine
import UIKit

class SelectOptionViewController: BaseMyCarViewController {
    
    // MARK: - UI properties
    private let scrollView: UIScrollView = UIScrollView()
    private let optionSelectView = OptionSelectView()
    private let separatorView = {
        let view = UIView()
        view.translatesAutoresizingMaskIntoConstraints = false
        view.backgroundColor = .hyundaiLightSand
        return view
    }()
    private let reviewView = TagReviewView()
    private let carImageView: UIImageView = {
        let imageView = UIImageView()
        imageView.translatesAutoresizingMaskIntoConstraints = false
        imageView.layer.cornerRadius = 8
        imageView.clipsToBounds = true
        return imageView
    }()
    private let optionDescriptionCollection = OptionSnapCarouselView()
    
    // MARK: - Properties
    
    // MARK: - Lifecycles
    override func viewDidLoad() {
        super.viewDidLoad()
        testInject()
        optionSelectView.refresh()
        testSetEvent()
        testPush()
    }
    
    // MARK: - Helpers
    override func setUI() {
        super.setUI()
        setProgress(to: .selectOptions)
        optionSelectView.datasource = self
        view.addSubview(scrollView)
        [optionSelectView, separatorView, reviewView, optionDescriptionCollection, carImageView].forEach {
            scrollView.addSubview($0)
        }
    }
    override func setLayout() {
        super.setLayout()
        scrollView.translatesAutoresizingMaskIntoConstraints = false
        NSLayoutConstraint.activate([
            scrollView.topAnchor.constraint(equalTo: progressView.bottomAnchor),
            scrollView.leadingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.leadingAnchor),
            scrollView.trailingAnchor.constraint(equalTo: view.safeAreaLayoutGuide.trailingAnchor),
            scrollView.bottomAnchor.constraint(equalTo: footerView.topAnchor),
            
            optionSelectView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            optionSelectView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            optionSelectView.topAnchor.constraint(equalTo: scrollView.contentLayoutGuide.topAnchor),
            optionSelectView.heightAnchor.constraint(equalTo: optionSelectView.widthAnchor, multiplier: 0.65),
            
            separatorView.topAnchor.constraint(equalTo: optionSelectView.bottomAnchor, constant: 0),
            separatorView.leadingAnchor.constraint(equalTo: view.leadingAnchor),
            separatorView.trailingAnchor.constraint(equalTo: view.trailingAnchor),
            separatorView.heightAnchor.constraint(equalToConstant: 6),
            
            reviewView.topAnchor.constraint(equalTo: separatorView.bottomAnchor, constant: 20),
            reviewView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            reviewView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            
            carImageView.topAnchor.constraint(equalTo: reviewView.bottomAnchor, constant: 10),
            carImageView.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 16),
            carImageView.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: -16),
            carImageView.heightAnchor.constraint(equalToConstant: 180 * CGRect.screenBounds.width / 352),
            
            optionDescriptionCollection.topAnchor.constraint(equalTo: carImageView.bottomAnchor, constant: 10),
            optionDescriptionCollection.leadingAnchor.constraint(equalTo: view.leadingAnchor, constant: 0),
            optionDescriptionCollection.trailingAnchor.constraint(equalTo: view.trailingAnchor, constant: 0),
            optionDescriptionCollection.heightAnchor.constraint(equalToConstant: 131),
            optionDescriptionCollection.bottomAnchor.constraint(equalTo: scrollView.contentLayoutGuide.bottomAnchor,
                                                               constant: -8)
        ])
    }

    private func testInject() {
        testReviewView()
        testOptionDescriptionCollection()
        testOptionSelectView()
    }
    // swiftlint: disable line_length
    private func testReviewView() {
        reviewView.refresh(by: tags[0], with: "Ïª¥Ìè¨Ìä∏ II")
    }
    private func testOptionDescriptionCollection() {
        carImageView.setAsyncImage(url: detailImages[0])
        optionDescriptionCollection.refresh(by: (0..<6).map {
            OptionDescriptionModel(index: $0, maxIndex: 6,
                                       title: "Ìó§ÎìúÏóÖ ÎîîÏä§ÌîåÎ†àÏù¥",
                                       optionDescription: "ÎèôÏäπÏÑùÏùò ÏãúÌä∏ Ìè¨ÏßÄÏÖòÏùÑ Ï°∞Ï†ïÌïòÏó¨ ÎèôÏäπÏûêÏùò Ï≤¥ÌòïÏóê ÎßûÎäî Ìé∏ÏïàÌïú ÏûêÏÑ∏Î•º Ïú†ÏßÄÌï† Ïàò ÏûàÎèÑÎ°ù ÎèïÎäî Í∏∞Îä•ÏûÖÎãàÎã§. 8Î∞©Ìñ•(ÏãúÌä∏Î∞± Í∏∞Ïö∏Í∏∞, ÏãúÌä∏ Ïïû/Îí§ Ïù¥Îèô,  Ïïû/Îí§ ÎÜíÏù¥ Ï°∞Ï†à)ÏúºÎ°ú Ï°∞Ï†àÏù¥ Í∏∞Îä•ÌïòÍ≥† Ïö¥Ï†ÑÏûê Î∞è Îí∑Ï¢åÏÑù(2Ïó¥) ÏäπÍ∞ùÏù¥ ÎèôÏäπÏÑù ÏãúÌä∏ ÏúÑÏπòÎ•º Ï°∞Ï†àÌï† Ïàò ÏûàÎäî ÏõåÌÅ¨Ïù∏ ÎîîÎ∞îÏù¥Ïä§Î•º Ï†ÅÏö©ÌïòÏó¨ Ïã§ÎÇ¥ Í≥µÍ∞Ñ ÌôúÏö© Ìé∏ÏùòÏÑ±ÏùÑ ÎÜíÏòÄÏäµÎãàÎã§.")
        })
    }
    
    private func testOptionSelectView() {
        optionSelectView.tapAddButtonSubject.sink(receiveValue: { [weak self] index in
            guard let self else { return }
            self.reviewView.refresh(by: tags[index.row], with: self.names[index.row])
        }).store(in: &bag)
    }
    
    // dataÎäî OptionSelectViewDataSourceÎ•º ÏúÑÌïú Îç∞Ïù¥ÌÑ∞ ÏÜåÏä§ ÏûÖÎãàÎã§.
    let tags = [
        [ "Ïñ¥Î¶∞Ïù¥üë∂", "Í∞ÄÏ°±Îì§ÎèÑ Ï¢ãÏùÄ ÏòµÏÖòüë®‚Äçüë©‚Äçüëß‚Äçüë¶", "Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöîüëç", "Íπ®ÎÅóÌïòÍ≤å Ïú†ÏßÄÌï† Ïàò ÏûàÏñ¥Ïöîüßπ", "ÎåÄÌòïÍ≤¨ÎèÑ Î¨∏Ï†ú ÏóÜÏñ¥Ïöîüê∂"],
        ["Ìé∏Î¶¨Ìï¥Ïöî‚ò∫Ô∏è", "Ïù¥Í≤ÉÎßå ÏûàÏúºÎ©¥ ÎÇòÎèÑ Ï£ºÏ∞®Í≥†Ïàòüöò", "Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöîüëç", "ÏïàÏ†ÑÏÇ¨Í≥† ÏòàÎ∞©üö®", "Ï≤òÏùåÎ≥¥Îäî ÏòµÏÖòüò≤"],
        ["Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöîüëç", "Í∞ÄÏ°±Îì§ÏùÑ ÏúÑÌïú ÏòµÏÖòüë®‚Äçüë©‚Äçüëß‚Äçüë¶", "Ïó¨Î¶ÑÏóê Ïì∞Í∏∞ Ï¢ãÏïÑÏöî‚òÄÔ∏è", "Ìé∏Î¶¨Ìï¥Ïöî‚ò∫Ô∏è"],
        ["Ìä∏Î†åÎîîÌïú ÎîîÏûêÏù∏üòé", "Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöî?", "Í∞ÄÏ°±Îì§ÎèÑ Ï¢ãÏùÄ ÏòµÏÖòüë®‚Äçüë©‚Äçüëß‚Äçüë¶", "ÏãúÏõêÌïú Í≥µÍ∏∞ü™ü", "Ïó¨Î¶ÑÏóê Ïì∞Í∏∞ Ï¢ãÏïÑÏöî‚òÄÔ∏è"],
        ["Í≥†ÌôîÏßàüëÄ", "Îπ†Î•∏ÏòÅÏÉÅÍ≥µÏú†üì∑", "Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöîüëç", "Î∞©Ï†ÑÍ±±Ï†ïÏóÜÏñ¥Ïöîüîã"],
        ["Ï£ºÌñâÏù¥ Ìé∏ÏïàÌï¥Ïöîüöô", "Í∞ÄÍ≤©Ïù¥ Ìï©Î¶¨Ï†ÅÏù¥ÏóêÏöîüëç", "Ìé∏Î¶¨Ìï¥Ïöî‚ò∫Ô∏è", "ÏïàÏ†ÑÏÇ¨Í≥† ÏòàÎ∞©üö®", "ÎØøÏùÑ Ïàò ÏûàÎäî ÏÑ±Îä•ü§ù"]
    ]
    let images = [
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/roa.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/pca.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/2_cooling.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/sun_roof.jpg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/cam.jpg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/smart_front_collision.jpeg"
    ]
    let names = [
        "Ïª¥Ìè¨Ìä∏ II",
        "Ï£ºÏ∞®Î≥¥Ï°∞ ÏãúÏä§ÌÖú II",
        "2Ïó¥ ÌÜµÌíç ÏãúÌä∏",
        "ÎìÄÏñº ÏôÄÏù¥Îìú ÏÑ†Î£®ÌîÑ",
        "ÎπåÌä∏Ïù∏ Ï∫†(Î≥¥Ï°∞Î∞∞ÌÑ∞Î¶¨ Ìè¨Ìï®)",
        "ÌòÑÎåÄÏä§ÎßàÌä∏ÏÑºÏä§ I"
    ]
    let prices = [
        1090000,
        690000,
        400000,
        890000,
        690000,
        790000
    ]
    let detailImages = [
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/roa.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/metalrearbumper.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/metaldoorscuff.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/powerfolding.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/3_heated.jpeg",
        "https://topcariving.s3.ap-northeast-2.amazonaws.com/selected/headupdisplay.jpeg"
    ]
    let headers = [
        "[ÌõÑÏÑù ÏäπÍ∞ù ÏïåÎ¶º]",
        "[Î©îÌÉà Î¶¨Ïñ¥Î≤îÌçºÏä§ÌÖù]",
        "[Î©îÌÉà ÎèÑÏñ¥Ïä§Ïª§ÌîÑ]",
        "[3Ïó¥ ÌååÏõåÌè¥Îî©ÏãúÌä∏]",
        "[3Ïó¥ Ïó¥ÏÑ†ÏãúÌä∏]",
        "[Ìó§ÎìúÏóÖ ÎîîÏä§ÌîåÎ†àÏù¥]"
    ]
    let details = [
        "Ï¥àÏùåÌåå ÏÑºÏÑúÎ•º ÌÜµÌï¥ Îí∑Ï¢åÏÑùÏóê ÎÇ®ÏïÑÏûàÎäî ÏäπÍ∞ùÏùò ÏõÄÏßÅÏûÑÏùÑ Í∞êÏßÄÌïòÏó¨ Ïö¥Ï†ÑÏûêÏóêÍ≤å Í≤ΩÍ≥†Ìï®ÏúºÎ°úÏç® Î∂ÄÏ£ºÏùòÏóê ÏùòÌïú Ïú†ÏïÑ ÎòêÎäî Î∞òÎ†§ ÎèôÎ¨º Îì±Ïùò Î∞©Ïπò ÏÇ¨Í≥†Î•º ÏòàÎ∞©ÌïòÎäî Ïã†Í∏∞Ïà†ÏûÖÎãàÎã§.",
        "Îü¨Í∏∞ÏßÄ Î£∏ ÏïûÏ™Ω ÌïòÎã®Î∂ÄÎ•º Î©îÌÉàÎ°ú ÎßåÎì§Ïñ¥ Î¨ºÍ±¥ÏùÑ Ïã£Í≥† ÎÇ¥Î¶¥ ÎïåÎÇò ÏÇ¨ÎûåÏù¥ Ïò¨ÎùºÍ∞à Îïå Ï∞®Ï≤¥Î•º Î≥¥Ìò∏Ìï¥Ï§çÎãàÎã§.",
        "ÏûêÎèôÏ∞®Î•º ÌÉÄÍ≥† ÎÇ¥Î¶¨Îäî ÎèÑÏñ¥Ïùò Î¨∏Ìãà ÌïòÎ∂ÄÎ•º Î≥¥Ìò∏ÌïòÎäî ÎèÑÏñ¥Ïä§Ïª§ÌîÑ Î∂ÄÎ∂ÑÏùÑ Î©îÌÉàÎ°ú ÎßåÎì§Ïñ¥ Ï∞®Ï≤¥Î•º Î≥¥Ìò∏ÌïòÍ≥† Î©îÌÉà ÎîîÏûêÏù∏ÏúºÎ°ú Í≥†Í∏âÏä§Îü¨Ïö¥ Í∞êÏÑ±ÏùÑ Ï†ÑÎã¨Ìï©ÎãàÎã§.",
        "Îü¨Í∏∞ÏßÄ ÏÇ¨Ïù¥ÎìúÏóê ÏûàÎäî Î≤ÑÌäºÏúºÎ°ú 3Ïó¥ ÏãúÌä∏Î•º Ï†ëÏóàÎã§ Ìéº Ïàò ÏûàÏúºÎ©∞, 2Ïó¥ ÏãúÌä∏ÎèÑ Ï°∞ÏûëÌï† Ïàò ÏûàÏñ¥ ÌôîÎ¨º Ï†ÅÏû¨ÏãúÎÇò 3Ïó¥ Ïù¥Ïö©Ïãú ÏÇ¨Ïö©ÏûêÏùò Ìé∏ÏùòÏÑ±ÏùÑ ÎÜíÏòÄÏäµÎãàÎã§.",
        "ÏãúÎèôÏù¥ Í±∏Î¶∞ ÏÉÅÌÉúÏóêÏÑú Ìï¥Îãπ Ï¢åÏÑù ÌûàÌÑ∞ Ïä§ÏúÑÏπòÎ•º ÎàÑÎ•¥Î©¥ Í∞ïÏïΩÏ°∞Ï†à ÌëúÏãúÎì±Ïù¥ ÏºúÏ†∏ ÏÇ¨Ïö© Ï§ëÏûÑÏùÑ ÎÇòÌÉÄÎÇ¥Í≥† Ìï¥Îãπ Ï¢åÏÑùÏù¥ Îî∞ÎúªÌï¥ÏßëÎãàÎã§.",
        " Ï£ºÏöî Ï£ºÌñâ Ï†ïÎ≥¥Î•º Ï†ÑÎ©¥ ÏúàÎìúÏã§ÎìúÏóê ÌëúÏãúÌïòÎ©∞, Î∞ùÍ∏∞Í∞Ä ÏµúÏ†ÅÌôîÎêòÏñ¥ Ï£ºÍ∞ÑÏóêÎèÑ ÏãúÏù∏ÏÑ±Ïù¥ Îõ∞Ïñ¥ÎÇ©ÎãàÎã§."
    ]
    lazy var data = (0..<6).map { OptionCardModel.init(image: self.images[$0], name: self.names[$0], price: self.prices[$0], isAdded: false) }
    private func testSetEvent() {
        optionSelectView.tapIncludedSubject.sink(receiveValue: { [weak self] in
            guard let self else { return }
            let modalVC = IncludedBaseItemModalViewController()
            modalVC.modalPresentationStyle = .automatic
            self.present(modalVC, animated: true)
        })
        .store(in: &bag)
        Publishers.Merge(optionSelectView.tapAddButtonSubject, optionSelectView.tapCellSubject)
            .sink(receiveValue: { [weak self] indexPath in
                guard let self else { return }
                let sequence = (0..<6).shuffled()
                let headers: [String] = sequence.map { self.headers[$0] }
                let dess: [String] = sequence.map { self.details[$0] }
                
                optionDescriptionCollection.refresh(by: (0..<6).map {
                    OptionDescriptionModel(index: $0, maxIndex: 6,
                                               title: headers[$0],
                                               optionDescription: dess[$0])
                })
                self.carImageView.setAsyncImage(url: detailImages[indexPath.row],
                                                size: carImageView.bounds.size)
                reviewView.refresh(by: tags[indexPath.row], with: names[indexPath.row])
            })
            .store(in: &bag)
        optionDescriptionCollection.didDisplayCellIndexPathSubject
            .sink(receiveValue: { [weak self] indexPath in
                guard let self else { return }
                self.carImageView.setAsyncImage(url: detailImages[indexPath.row], size: carImageView.bounds.size)
            })
            .store(in: &bag)
    }
    private func testPush() {
        footerView.tapNextButton.sink(receiveValue: {[weak self] _ in
            guard let self else { return }
            self.navigationController?.pushViewController(SelectGenuineOptionViewController(), animated: true)
        })
        .store(in: &bag)
    }
}

extension SelectOptionViewController: OptionSelectViewDataSource {
    func numberOfOption(_ optionSelectView: OptionSelectView) -> Int {
        5
    }
    func optionSelectModel(_ optionSelectView: OptionSelectView, at indexPath: IndexPath) -> OptionCardModel {
        data[indexPath.row]
    }
}
